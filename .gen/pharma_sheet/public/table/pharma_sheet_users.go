//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PharmaSheetUsers = newPharmaSheetUsersTable("public", "pharma_sheet_users", "")

type pharmaSheetUsersTable struct {
	postgres.Table

	// Columns
	UserID      postgres.ColumnString
	FirebaseUID postgres.ColumnString
	Email       postgres.ColumnString
	DisplayName postgres.ColumnString
	ImageURL    postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PharmaSheetUsersTable struct {
	pharmaSheetUsersTable

	EXCLUDED pharmaSheetUsersTable
}

// AS creates new PharmaSheetUsersTable with assigned alias
func (a PharmaSheetUsersTable) AS(alias string) *PharmaSheetUsersTable {
	return newPharmaSheetUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PharmaSheetUsersTable with assigned schema name
func (a PharmaSheetUsersTable) FromSchema(schemaName string) *PharmaSheetUsersTable {
	return newPharmaSheetUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PharmaSheetUsersTable with assigned table prefix
func (a PharmaSheetUsersTable) WithPrefix(prefix string) *PharmaSheetUsersTable {
	return newPharmaSheetUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PharmaSheetUsersTable with assigned table suffix
func (a PharmaSheetUsersTable) WithSuffix(suffix string) *PharmaSheetUsersTable {
	return newPharmaSheetUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPharmaSheetUsersTable(schemaName, tableName, alias string) *PharmaSheetUsersTable {
	return &PharmaSheetUsersTable{
		pharmaSheetUsersTable: newPharmaSheetUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newPharmaSheetUsersTableImpl("", "excluded", ""),
	}
}

func newPharmaSheetUsersTableImpl(schemaName, tableName, alias string) pharmaSheetUsersTable {
	var (
		UserIDColumn      = postgres.StringColumn("user_id")
		FirebaseUIDColumn = postgres.StringColumn("firebase_uid")
		EmailColumn       = postgres.StringColumn("email")
		DisplayNameColumn = postgres.StringColumn("display_name")
		ImageURLColumn    = postgres.StringColumn("image_url")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{UserIDColumn, FirebaseUIDColumn, EmailColumn, DisplayNameColumn, ImageURLColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{FirebaseUIDColumn, EmailColumn, DisplayNameColumn, ImageURLColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return pharmaSheetUsersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:      UserIDColumn,
		FirebaseUID: FirebaseUIDColumn,
		Email:       EmailColumn,
		DisplayName: DisplayNameColumn,
		ImageURL:    ImageURLColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
