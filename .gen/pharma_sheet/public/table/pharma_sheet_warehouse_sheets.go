//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PharmaSheetWarehouseSheets = newPharmaSheetWarehouseSheetsTable("public", "pharma_sheet_warehouse_sheets", "")

type pharmaSheetWarehouseSheetsTable struct {
	postgres.Table

	// Columns
	WarehouseID          postgres.ColumnString
	SpreadsheetID        postgres.ColumnString
	MedicineSheetID      postgres.ColumnInteger
	MedicineBrandSheetID postgres.ColumnInteger
	MedicineHouseSheetID postgres.ColumnInteger
	LatestSyncedAt       postgres.ColumnTimestampz
	CreatedAt            postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PharmaSheetWarehouseSheetsTable struct {
	pharmaSheetWarehouseSheetsTable

	EXCLUDED pharmaSheetWarehouseSheetsTable
}

// AS creates new PharmaSheetWarehouseSheetsTable with assigned alias
func (a PharmaSheetWarehouseSheetsTable) AS(alias string) *PharmaSheetWarehouseSheetsTable {
	return newPharmaSheetWarehouseSheetsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PharmaSheetWarehouseSheetsTable with assigned schema name
func (a PharmaSheetWarehouseSheetsTable) FromSchema(schemaName string) *PharmaSheetWarehouseSheetsTable {
	return newPharmaSheetWarehouseSheetsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PharmaSheetWarehouseSheetsTable with assigned table prefix
func (a PharmaSheetWarehouseSheetsTable) WithPrefix(prefix string) *PharmaSheetWarehouseSheetsTable {
	return newPharmaSheetWarehouseSheetsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PharmaSheetWarehouseSheetsTable with assigned table suffix
func (a PharmaSheetWarehouseSheetsTable) WithSuffix(suffix string) *PharmaSheetWarehouseSheetsTable {
	return newPharmaSheetWarehouseSheetsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPharmaSheetWarehouseSheetsTable(schemaName, tableName, alias string) *PharmaSheetWarehouseSheetsTable {
	return &PharmaSheetWarehouseSheetsTable{
		pharmaSheetWarehouseSheetsTable: newPharmaSheetWarehouseSheetsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                        newPharmaSheetWarehouseSheetsTableImpl("", "excluded", ""),
	}
}

func newPharmaSheetWarehouseSheetsTableImpl(schemaName, tableName, alias string) pharmaSheetWarehouseSheetsTable {
	var (
		WarehouseIDColumn          = postgres.StringColumn("warehouse_id")
		SpreadsheetIDColumn        = postgres.StringColumn("spreadsheet_id")
		MedicineSheetIDColumn      = postgres.IntegerColumn("medicine_sheet_id")
		MedicineBrandSheetIDColumn = postgres.IntegerColumn("medicine_brand_sheet_id")
		MedicineHouseSheetIDColumn = postgres.IntegerColumn("medicine_house_sheet_id")
		LatestSyncedAtColumn       = postgres.TimestampzColumn("latest_synced_at")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		allColumns                 = postgres.ColumnList{WarehouseIDColumn, SpreadsheetIDColumn, MedicineSheetIDColumn, MedicineBrandSheetIDColumn, MedicineHouseSheetIDColumn, LatestSyncedAtColumn, CreatedAtColumn}
		mutableColumns             = postgres.ColumnList{SpreadsheetIDColumn, MedicineSheetIDColumn, MedicineBrandSheetIDColumn, MedicineHouseSheetIDColumn, LatestSyncedAtColumn, CreatedAtColumn}
	)

	return pharmaSheetWarehouseSheetsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WarehouseID:          WarehouseIDColumn,
		SpreadsheetID:        SpreadsheetIDColumn,
		MedicineSheetID:      MedicineSheetIDColumn,
		MedicineBrandSheetID: MedicineBrandSheetIDColumn,
		MedicineHouseSheetID: MedicineHouseSheetIDColumn,
		LatestSyncedAt:       LatestSyncedAtColumn,
		CreatedAt:            CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
