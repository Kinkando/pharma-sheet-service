//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PharmaSheetMedicineHouses = newPharmaSheetMedicineHousesTable("public", "pharma_sheet_medicine_houses", "")

type pharmaSheetMedicineHousesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	WarehouseID  postgres.ColumnString
	MedicationID postgres.ColumnString
	Locker       postgres.ColumnString
	Floor        postgres.ColumnInteger
	No           postgres.ColumnInteger
	Label        postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PharmaSheetMedicineHousesTable struct {
	pharmaSheetMedicineHousesTable

	EXCLUDED pharmaSheetMedicineHousesTable
}

// AS creates new PharmaSheetMedicineHousesTable with assigned alias
func (a PharmaSheetMedicineHousesTable) AS(alias string) *PharmaSheetMedicineHousesTable {
	return newPharmaSheetMedicineHousesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PharmaSheetMedicineHousesTable with assigned schema name
func (a PharmaSheetMedicineHousesTable) FromSchema(schemaName string) *PharmaSheetMedicineHousesTable {
	return newPharmaSheetMedicineHousesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PharmaSheetMedicineHousesTable with assigned table prefix
func (a PharmaSheetMedicineHousesTable) WithPrefix(prefix string) *PharmaSheetMedicineHousesTable {
	return newPharmaSheetMedicineHousesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PharmaSheetMedicineHousesTable with assigned table suffix
func (a PharmaSheetMedicineHousesTable) WithSuffix(suffix string) *PharmaSheetMedicineHousesTable {
	return newPharmaSheetMedicineHousesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPharmaSheetMedicineHousesTable(schemaName, tableName, alias string) *PharmaSheetMedicineHousesTable {
	return &PharmaSheetMedicineHousesTable{
		pharmaSheetMedicineHousesTable: newPharmaSheetMedicineHousesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                       newPharmaSheetMedicineHousesTableImpl("", "excluded", ""),
	}
}

func newPharmaSheetMedicineHousesTableImpl(schemaName, tableName, alias string) pharmaSheetMedicineHousesTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		WarehouseIDColumn  = postgres.StringColumn("warehouse_id")
		MedicationIDColumn = postgres.StringColumn("medication_id")
		LockerColumn       = postgres.StringColumn("locker")
		FloorColumn        = postgres.IntegerColumn("floor")
		NoColumn           = postgres.IntegerColumn("no")
		LabelColumn        = postgres.StringColumn("label")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, WarehouseIDColumn, MedicationIDColumn, LockerColumn, FloorColumn, NoColumn, LabelColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{WarehouseIDColumn, MedicationIDColumn, LockerColumn, FloorColumn, NoColumn, LabelColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return pharmaSheetMedicineHousesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		WarehouseID:  WarehouseIDColumn,
		MedicationID: MedicationIDColumn,
		Locker:       LockerColumn,
		Floor:        FloorColumn,
		No:           NoColumn,
		Label:        LabelColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
