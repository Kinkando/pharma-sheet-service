//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PharmaSheetMedicines = newPharmaSheetMedicinesTable("public", "pharma_sheet_medicines", "")

type pharmaSheetMedicinesTable struct {
	postgres.Table

	// Columns
	MedicationID postgres.ColumnString
	MedicalName  postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PharmaSheetMedicinesTable struct {
	pharmaSheetMedicinesTable

	EXCLUDED pharmaSheetMedicinesTable
}

// AS creates new PharmaSheetMedicinesTable with assigned alias
func (a PharmaSheetMedicinesTable) AS(alias string) *PharmaSheetMedicinesTable {
	return newPharmaSheetMedicinesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PharmaSheetMedicinesTable with assigned schema name
func (a PharmaSheetMedicinesTable) FromSchema(schemaName string) *PharmaSheetMedicinesTable {
	return newPharmaSheetMedicinesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PharmaSheetMedicinesTable with assigned table prefix
func (a PharmaSheetMedicinesTable) WithPrefix(prefix string) *PharmaSheetMedicinesTable {
	return newPharmaSheetMedicinesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PharmaSheetMedicinesTable with assigned table suffix
func (a PharmaSheetMedicinesTable) WithSuffix(suffix string) *PharmaSheetMedicinesTable {
	return newPharmaSheetMedicinesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPharmaSheetMedicinesTable(schemaName, tableName, alias string) *PharmaSheetMedicinesTable {
	return &PharmaSheetMedicinesTable{
		pharmaSheetMedicinesTable: newPharmaSheetMedicinesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newPharmaSheetMedicinesTableImpl("", "excluded", ""),
	}
}

func newPharmaSheetMedicinesTableImpl(schemaName, tableName, alias string) pharmaSheetMedicinesTable {
	var (
		MedicationIDColumn = postgres.StringColumn("medication_id")
		MedicalNameColumn  = postgres.StringColumn("medical_name")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{MedicationIDColumn, MedicalNameColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{MedicalNameColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return pharmaSheetMedicinesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		MedicationID: MedicationIDColumn,
		MedicalName:  MedicalNameColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
